### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AlternateName {
  ingredientId: Int
  name: String
}

type AuthenticationResponse {
  authURL: String
  errorMessage: String
  evernoteAuthToken: String
  evernoteExpiration: String
  evernoteReqSecret: String
  evernoteReqToken: String
  isAuthPending: Boolean
  isAuthenticated: Boolean
}

type EvernoteResponse {
  error: String
  notes: [Note]
}

type ImportLocalResponse {
  errorMessage: String
}

type Ingredient {
  alternateNames: [AlternateName]
  createdAt: String
  id: Int
  isComposedIngredient: Boolean
  isValidated: Boolean
  name: String
  parent: Ingredient
  plural: String
  properties: [Property]
  references: [IngredientLine]
  relatedIngredients: [Ingredient]
  substitutes: [Ingredient]
  updatedAt: String
}

type IngredientLine {
  blockIndex: Int
  createdAt: String
  id: Int
  isParsed: Boolean
  lineIndex: Int
  parsed: [ParsedSegment]
  reference: String
  rule: String
  updatedAt: String
}

type InstructionLine {
  blockIndex: Int
  createdAt: String
  id: Int
  reference: String
  updatedAt: String
}

type Mutation {
  authenticateEvernote(oauthVerifier: String): AuthenticationResponse
  clearAuthentication: AuthenticationResponse
  getNotesContent: EvernoteResponse
  getNotesMeta: EvernoteResponse
  getParsedNotes: EvernoteResponse
  importLocal: ImportLocalResponse
  resetDatabase: EvernoteResponse
  saveRecipes: EvernoteResponse
}

type Note {
  content: String
  createdAt: String
  evernoteGUID: String!
  id: Int
  image: String
  ingredients: [IngredientLine]
  instructions: [InstructionLine]
  isParsed: Boolean
  source: String
  title: String!
  updatedAt: String
}

type NoteMeta {
  evernoteGUID: String!
  id: Int
  title: String!
}

type ParsedSegment {
  createdAt: String
  id: Int
  index: Int
  ingredient: Ingredient
  ingredientId: Int
  ingredientLineId: Int
  rule: String
  type: String
  updatedAt: String
  value: String
}

enum Property {
  DAIRY
  FISH
  GLUTEN
  MEAT
  POULTRY
  SOY
}

type Query {
  note(id: ID): Note
  notes: [Note]
  user(id: ID): User
}

enum Role {
  ADMIN
  USER
}

type StandardResponse {
  error: String
  notes: [NoteMeta]
}

type User {
  createdAt: String
  email: String
  emailVerified: String
  evernoteAuthToken: String
  evernoteExpiration: String
  evernoteReqSecret: String
  evernoteReqToken: String
  id: String
  image: String
  name: String
  noteImportOffset: String
  role: Role
  updatedAt: String
}
